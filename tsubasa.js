// Generated by CoffeeScript 1.4.0
(function() {
  var Bullet, Camera, Ship, Terrain, canvas_height, canvas_width, down, enter, game, left, right, space, up;

  window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  left = 37;

  up = 38;

  right = 39;

  down = 40;

  space = 32;

  enter = 13;

  canvas_width = 320;

  canvas_height = 240;

  Ship = function(x, y) {
    this.x = x;
    this.y = y;
    this.dx = 0;
    this.dy = 0;
    this.rot = 0;
    this.img = new Image();
    game.waitForLoading(this.img);
    this.img.src = "img/v.png";
    return Ship.ships.push(this);
  };

  Ship.ships = [];

  Ship.render = function(c) {
    var ship, _i, _len, _ref, _results;
    _ref = Ship.ships;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ship = _ref[_i];
      _results.push(ship.render(c));
    }
    return _results;
  };

  Ship.move = function() {
    var ship, _i, _len, _ref, _results;
    _ref = Ship.ships;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ship = _ref[_i];
      _results.push(ship.move());
    }
    return _results;
  };

  Ship.prototype.render = function(c) {
    c.save();
    c.translate(this.x, this.y);
    c.rotate(this.rot);
    c.drawImage(this.img, -0.5 * this.img.width, -0.5 * this.img.height);
    return c.restore();
  };

  Ship.prototype.acc = function(amount) {
    this.dx += Math.sin(this.rot) * amount;
    return this.dy -= Math.cos(this.rot) * amount;
  };

  Ship.prototype.dec = function(amount) {
    this.dx += Math.sin(this.rot) * -amount;
    return this.dy -= Math.cos(this.rot) * -amount;
  };

  Ship.prototype.rotate = function(amount) {
    return this.rot += amount;
  };

  Ship.prototype.move = function() {
    this.x += this.dx;
    return this.y += this.dy;
  };

  Ship.prototype.shoot = function() {
    return new Bullet(this.x, this.y, this.dx, this.dy, this.getSpeed(), this.rot);
  };

  Ship.prototype.getSpeed = function() {
    return Math.sqrt(Math.pow(this.dx, 2) + Math.pow(this.dy, 2));
  };

  Terrain = function(terrainFileName) {
    this.img = new Image();
    game.waitForLoading(this.img);
    return this.img.src = terrainFileName;
  };

  Terrain.prototype.render = function(c) {
    return c.drawImage(this.img, 0, 0);
  };

  Camera = function(x, y) {
    this.x = x;
    return this.y = y;
  };

  Camera.prototype.moveTo = function(x, y) {
    this.x = x;
    return this.y = y;
  };

  Camera.prototype.setFocus = function() {
    return game.cam = this;
  };

  Bullet = function(x, y, dx, dy, speed, dir) {
    this.x = x;
    this.y = y;
    this.dx = dx + Math.sin(dir) * 10;
    this.dy = dy + -Math.cos(dir) * 10;
    return Bullet.bullets.push(this);
  };

  Bullet.bullets = [];

  Bullet.move = function() {
    var bullet, _i, _len, _ref, _results;
    _ref = Bullet.bullets;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      bullet = _ref[_i];
      _results.push(bullet.move());
    }
    return _results;
  };

  Bullet.render = function(c) {
    var bullet, _i, _len, _ref, _results;
    _ref = Bullet.bullets;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      bullet = _ref[_i];
      _results.push(bullet.render(c));
    }
    return _results;
  };

  Bullet.prototype.move = function() {
    this.x += this.dx;
    return this.y += this.dy;
  };

  Bullet.prototype.render = function(c) {
    c.beginPath();
    c.moveTo(this.x - this.dx, this.y - this.dy);
    c.lineTo(this.x, this.y);
    return c.stroke();
  };

  game = {
    keys: {},
    render: function() {
      game.c.save();
      game.c.clearRect(0, 0, canvas_width, canvas_height);
      game.c.translate(-game.cam.x + (canvas_width / 2), -game.cam.y + (canvas_width / 2));
      game.terrain.render(game.c);
      Ship.render(game.c);
      Bullet.render(game.c);
      return game.c.restore();
    },
    commands: (function() {
      var cmd;
      cmd = {};
      cmd[up] = function() {
        return game.player.acc(0.18);
      };
      cmd[down] = function() {
        return game.player.dec(0.18);
      };
      cmd[left] = function() {
        return game.player.rotate(-0.06);
      };
      cmd[right] = function() {
        return game.player.rotate(0.06);
      };
      cmd[space] = function() {
        return game.player.shoot();
      };
      cmd[enter] = function() {
        return console.log(game.player.getSpeed());
      };
      return cmd;
    })(),
    logic: function() {
      var action, key, _ref;
      _ref = game.commands;
      for (key in _ref) {
        action = _ref[key];
        if (game.keys[key]) {
          action();
        }
      }
      Ship.move();
      Bullet.move();
      return game.cam.moveTo(game.player.x, game.player.y);
    },
    tick: function() {
      game.logic();
      game.render();
      return requestAnimFrame(game.tick);
    },
    waitList: [],
    waitForLoading: function(object) {
      this.waitList.push(object);
      object.ready = false;
      return object.onload = function() {
        object.ready = true;
        return game.readyForRun();
      };
    },
    readyForRun: function() {
      var object, _i, _len, _ref;
      _ref = this.waitList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        if (!object.ready) {
          return false;
        }
      }
      return this.tick();
    },
    init: function() {
      game.player = new Ship(100, 100);
      game.terrain = new Terrain("img/terrain1.png");
      game.cam = new Camera(60, 60);
      return this.readyForRun();
    }
  };

  $(document).ready(function() {
    var canvas;
    canvas = document.createElement("canvas");
    canvas.width = canvas_width;
    canvas.height = canvas_height;
    game.c = canvas.getContext("2d");
    document.getElementById("shinkuunotsubasa").appendChild(canvas);
    $(document).keydown(function(eventInfo) {
      return game.keys[eventInfo.which] = true;
    });
    $(document).keyup(function(eventInfo) {
      return game.keys[eventInfo.which] = false;
    });
    return game.init();
  });

}).call(this);
