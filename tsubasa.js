// Generated by CoffeeScript 1.4.0
(function() {
  var Bullet, Camera, Ship, Terrain, a, canvas_height, canvas_width, down, enter, game, left, right, space, up;

  window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  left = 37;

  up = 38;

  right = 39;

  down = 40;

  space = 32;

  enter = 13;

  a = 65;

  canvas_width = 320;

  canvas_height = 240;

  Terrain = window.Terrain;

  Ship = function(x, y) {
    this.x = x;
    this.y = y;
    this.dx = 0;
    this.dy = 0;
    this.rot = 0;
    this.width = 16;
    this.height = 16;
    this.xAnimOffset = Math.round(-0.5 * this.width);
    this.yAnimOffset = Math.round(-0.5 * this.height);
    this.loadingBullet = 0;
    this.img = new Image();
    game.waitForLoading(this.img);
    this.img.src = "img/v.png";
    return Ship.ships.push(this);
  };

  Ship.ships = [];

  Ship.render = function(c) {
    var ship, _i, _len, _ref, _results;
    _ref = Ship.ships;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ship = _ref[_i];
      _results.push(ship.render(c));
    }
    return _results;
  };

  Ship.update = function() {
    var ship, _i, _len, _ref, _results;
    _ref = Ship.ships;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ship = _ref[_i];
      ship.move();
      ship.hit();
      _results.push(ship.loadingBullet--);
    }
    return _results;
  };

  Ship.prototype.render = function(c) {
    c.save();
    c.translateRound(this.x, this.y);
    c.rotate(this.rot);
    c.drawImage(this.img, this.xAnimOffset, this.yAnimOffset);
    return c.restore();
  };

  Ship.prototype.acc = function(amount) {
    this.dx += Math.sin(this.rot) * amount;
    return this.dy -= Math.cos(this.rot) * amount;
  };

  Ship.prototype.dec = function(amount) {
    this.dx += Math.sin(this.rot) * -amount;
    return this.dy -= Math.cos(this.rot) * -amount;
  };

  Ship.prototype.rotate = function(amount) {
    return this.rot += amount;
  };

  Ship.prototype.move = function() {
    this.x += this.dx;
    return this.y += this.dy;
  };

  Ship.prototype.shoot = function() {
    if (this.loadingBullet <= 0) {
      new Bullet(this.x, this.y, this.dx, this.dy, 10, this.rot);
      return this.loadingBullet = 10;
    }
  };

  Ship.prototype.getSpeed = function() {
    return Math.sqrt(Math.pow(this.dx, 2) + Math.pow(this.dy, 2));
  };

  Ship.prototype.hit = function() {
    var coord, vect;
    coord = game.terrain.lineHit(this.x - this.dx, this.y - this.dy, this.x, this.y);
    if (coord) {
      vect = game.terrain.detectCurvature(coord[0], coord[1]);
      return this.bounce(vect[0], vect[1]);
    }
  };

  Ship.prototype.bounce = function(dx, dy) {
    this.dx = dx / 8;
    this.dy = dy / 8;
    return this.move();
  };

  Camera = function(x, y, viewport_width, viewport_height) {
    this.x = x;
    this.y = y;
    this.width = viewport_width;
    return this.height = viewport_height;
  };

  Camera.prototype.focusTo = function(x, y) {
    x = x - (this.width / 2);
    if (x < 0) {
      x = 0;
    }
    if (x + this.width > game.terrain.width) {
      x = game.terrain.width - this.width;
    }
    y = y - (this.height / 2);
    if (y < 0) {
      y = 0;
    }
    if (y + this.height > game.terrain.height) {
      y = game.terrain.height - this.height;
    }
    this.x = x;
    return this.y = y;
  };

  Camera.prototype.setFocus = function() {
    return game.cam = this;
  };

  Bullet = function(x, y, dx, dy, speed, dir) {
    this.x = x;
    this.y = y;
    this.dx = dx + Math.sin(dir) * speed;
    this.dy = dy + -Math.cos(dir) * speed;
    Bullet.bullets.push(this);
    this.hit(game.c);
    return Bullet.performDestroy();
  };

  Bullet.bullets = [];

  Bullet.toBeDestroyed = [];

  Bullet.update = function(c) {
    var bullet, _i, _len, _ref;
    _ref = Bullet.bullets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      bullet = _ref[_i];
      bullet.move();
      bullet.hit(c);
      bullet.clean();
    }
    if (Bullet.toBeDestroyed.length > 0) {
      return this.performDestroy();
    }
  };

  Bullet.performDestroy = function() {
    var bullet, deadBullet, index, _i, _len, _ref, _ref1;
    _ref = Bullet.toBeDestroyed;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      deadBullet = _ref[_i];
      _ref1 = Bullet.bullets;
      for (index in _ref1) {
        bullet = _ref1[index];
        if (bullet === deadBullet) {
          break;
        }
      }
      Bullet.bullets.splice(index, 1);
    }
    return Bullet.toBeDestroyed = [];
  };

  Bullet.render = function(c) {
    var bullet, _i, _len, _ref, _results;
    _ref = Bullet.bullets;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      bullet = _ref[_i];
      _results.push(bullet.render(c));
    }
    return _results;
  };

  Bullet.prototype.move = function() {
    this.x += this.dx;
    return this.y += this.dy;
  };

  Bullet.prototype.render = function(c) {
    c.beginPath();
    c.strokeStyle = "rgb(255,255,255)";
    c.moveTo(Math.round(this.x) + 0.5, Math.round(this.y) + 0.5);
    c.lineTo(Math.round(this.x + this.dx) + 0.5, Math.round(this.y + this.dy) + 0.5);
    return c.stroke();
  };

  Bullet.prototype.hit = function(c) {
    var coords;
    if (coords = game.terrain.lineHit(this.x - this.dx, this.y - this.dy, this.x, this.y)) {
      this.destroy();
      return game.terrain.blow(coords[0], coords[1], 4);
    }
  };

  Bullet.prototype.clean = function() {
    if (this.x < 0) {
      this.destroy();
      return;
    }
    if (this.y < 0) {
      this.destroy();
      return;
    }
    if (this.x > game.terrain.width) {
      this.destroy();
      return;
    }
    if (this.y > game.terrain.height) {
      this.destroy();
    }
  };

  Bullet.prototype.destroy = function() {
    return Bullet.toBeDestroyed.push(this);
  };

  game = {
    keys: {},
    render: function() {
      game.c.save();
      game.c.clearRect(0, 0, canvas_width, canvas_height);
      game.terrain.render(game.c, game.cam);
      game.c.translateRound(-game.cam.x, -game.cam.y);
      Ship.render(game.c);
      Bullet.render(game.c);
      game.c.drawImage(game.debug, 0, 0);
      return game.c.restore();
    },
    commands: (function() {
      var cmd;
      cmd = {};
      cmd[up] = function() {
        return game.player.acc(0.18);
      };
      cmd[down] = function() {
        return game.player.dec(0.18);
      };
      cmd[left] = function() {
        return game.player.rotate(-0.06);
      };
      cmd[right] = function() {
        return game.player.rotate(0.06);
      };
      cmd[space] = function() {
        return game.player.shoot();
      };
      cmd[enter] = function() {
        game.player.dx = 0;
        return game.player.dy = 0;
      };
      return cmd;
    })(),
    logic: function() {
      var action, key, _ref;
      _ref = game.commands;
      for (key in _ref) {
        action = _ref[key];
        if (game.keys[key]) {
          action();
        }
      }
      Ship.update();
      Bullet.update(game.c);
      return game.cam.focusTo(game.player.x, game.player.y);
    },
    tick: function() {
      game.logic();
      game.render();
      return requestAnimFrame(game.tick);
    },
    waitList: [],
    waitForLoading: function(object, callback) {
      this.waitList.push(object);
      object.ready = false;
      return object.onload = function() {
        object.ready = true;
        if (callback != null) {
          callback(object);
        }
        return game.runIfReady();
      };
    },
    runIfReady: function() {
      var object, _i, _len, _ref;
      _ref = this.waitList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        if (!object.ready) {
          return false;
        }
      }
      return this.tick();
    },
    init: function() {
      game.waitForLoading(game);
      game.player = new Ship(20, 100);
      game.player.rotate(Math.PI / 2);
      game.terrain = new Terrain("img/terrain1.png", 700, 500, this);
      game.debug = document.createElement('canvas');
      game.debug.width = game.terrain.width;
      game.debug.height = game.terrain.height;
      game.d_ctx = game.debug.getContext("2d");
      game.cam = new Camera(60, 60, canvas_width, canvas_height);
      game.ready = true;
      return game.onload();
    }
  };

  $(document).ready(function() {
    var canvas;
    canvas = document.createElement("canvas");
    canvas.width = canvas_width;
    canvas.height = canvas_height;
    game.c = canvas.getContext("2d");
    game.c.imageSmoothingEnabled = false;
    game.c.translateRound = function(x, y) {
      return game.c.translate(Math.round(x), Math.round(y));
    };
    document.getElementById("shinkuunotsubasa").appendChild(canvas);
    $(document).keydown(function(eventInfo) {
      return game.keys[eventInfo.which] = true;
    });
    $(document).keyup(function(eventInfo) {
      return game.keys[eventInfo.which] = false;
    });
    return game.init();
  });

}).call(this);
